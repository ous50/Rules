rules: 
- RULE-SET,Reject,AdBlock
- RULE-SET,Special,DIRECT

- RULE-SET,AsianTV,AsianTV


- RULE-SET,GlobalTV,GlobalTV


- RULE-SET,Steam,SteamAndPayPal
- RULE-SET,PayPal,SteamAndPayPal

- RULE-SET,Speedtest,Speedtest

- RULE-SET,PROXY,Proxy
- RULE-SET,Telegram,Proxy

- RULE-SET,Apple,AppleAndMicrosoft
- RULE-SET,Microsoft,AppleAndMicrosoft

- RULE-SET,Scholar,Scholar

- RULE-SET,Domestic,Domestic
- RULE-SET,Domestic IPs,Domestic

- RULE-SET,LAN,DIRECT
- GEOIP,CN,Domestic
- MATCH,Others

script:
  code: |
    def main(ctx, metadata):
        port_list = [21, 22, 23, 53, 80, 123, 143, 194, 443, 465, 587, 853, 993, 995, 998, 2052, 2053, 2082, 2083, 2086, 2095, 2096, 5222, 5228, 5229, 5230, 8080, 8443, 8880, 8888, 8889]
        ruleset_action = {
            "Reject": "AdBlock",
            "Special": "DIRECT",
            "AsianTV": "AsianTV",
            "GlobalTV": "GlobalTV",

            "PROXY": "Proxy",

            "Steam": "SteamAndPayPal",
            "PayPal": "SteamAndPayPal",

            "Microsoft": "AppleAndMicrosoft",
            "Apple": "AppleAndMicrosoft",

            "Domestic": "Domestic",
            "Domestic IPs": "Domestic",
            "LAN": "DIRECT"
            }
        port = int(metadata["dst_port"])
        if port not in port_list:
            return "DIRECT"
        for rule_name in ctx.rule_providers.keys():
            if ctx.rule_providers[rule_name].match(metadata):
                return ruleset_action[rule_name]
        ip = metadata["dst_ip"] or ctx.resolve_ip(metadata["host"])
        if ip == "":
          return "DIRECT"
        code = ctx.geoip(ip)
        if code == "CN":
          return "Domestic"
        return "Others"


rule-providers:
  Special:
    type: http
    behavior: classical
    url: 'https://cdn.jsdelivr.net/gh/zzcabc/Rules@release/Rules-Streamline/Provider/Special.yaml'
    path: ./Rules/Special
    interval: 86400
  AsianTV:
    type: http
    behavior: classical
    url: 'https://cdn.jsdelivr.net/gh/zzcabc/Rules@release/Rules-Streamline/Provider/AsianTV/AsianTV.yaml'
    path: ./Rules/Media/AsianTV/AsianTV
    interval: 86400

  GlobalTV:
    type: http
    behavior: classical
    url: 'https://cdn.jsdelivr.net/gh/zzcabc/Rules@release/Rules-Streamline/Provider/Media/GlobalTV/GlobalTV.yaml'
    path: ./Rules/Media/GlobalTV/GlobalTV
    interval: 86400


  Steam:
    type: http
    behavior: classical
    url: 'https://cdn.jsdelivr.net/gh/zzcabc/Rules@release/Rules-Streamline/Provider/Steam.yaml'
    path: ./Rules/Steam
    interval: 86400
  PayPal:
    type: http
    behavior: classical
    url: 'https://cdn.jsdelivr.net/gh/zzcabc/Rules@release/Rules-Streamline/Provider/PayPal.yaml'
    path: ./Rules/PayPal
    interval: 86400


  PROXY:
    type: http
    behavior: classical
    url: 'https://cdn.jsdelivr.net/gh/zzcabc/Rules@release/Rules-Streamline/Provider/Proxy.yaml'
    path: ./Rules/Proxy
    interval: 86400

  Microsoft:
    type: http
    behavior: classical
    url: 'https://cdn.jsdelivr.net/gh/zzcabc/Rules@release/Rules-Streamline/Provider/Microsoft.yaml'
    path: ./Rules/Microsoft
    interval: 86400
  Apple:
    type: http
    behavior: classical
    url: 'https://cdn.jsdelivr.net/gh/zzcabc/Rules@release/Rules-Streamline/Provider/Apple.yaml'
    path: ./Rules/Apple
    interval: 86400

  Domestic:
    type: http
    behavior: classical
    url: 'https://cdn.jsdelivr.net/gh/zzcabc/Rules@release/Rules-Streamline/Provider/Domestic.yaml'
    path: ./Rules/Domestic
    interval: 86400
  Domestic IPs:
    type: http
    behavior: ipcidr
    url: 'https://cdn.jsdelivr.net/gh/zzcabc/Rules@release/Rules-Streamline/Provider/Domestic%20IPs.yaml'
    path: ./Rules/Domestic_IPs
    interval: 86400
  LAN:
    type: http
    behavior: classical
    url: 'https://cdn.jsdelivr.net/gh/zzcabc/Rules@release/Rules-Streamline/Provider/LAN.yaml'
    path: ./Rules/LAN
    interval: 86400
